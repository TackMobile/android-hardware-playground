package com.tackmobile.ioiolights;

import ioio.lib.api.SpiMaster;
import ioio.lib.api.exception.ConnectionLostException;
import ioio.lib.util.BaseIOIOLooper;
import ioio.lib.util.IOIOLooper;
import ioio.lib.util.android.IOIOActivity;

import android.os.Bundle;
import android.util.Log;

/**
 * A IOIO holiday application!
 * Blink an LED strip by using random color from the Android camera.
 * IOIO pin 3 -> clock
 * IOIO pin 4 -> data
 * Built for an LED strip such as this one:
 * http://www.sparkfun.com/products/10312
 * 
 * That's just a sample application - use your best creativity to modify it!
 *
 * @author ytai
 */
public class MainActivity extends IOIOActivity {
	private static final String TAG = "MainActivity";
	private RGB RGB_ = new RGB();
	byte[] buffer1_ = new byte[48];
	byte[] buffer2_ = new byte[48];

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
	}

	/** An RGB triplet. */
	private static class RGB {
		byte r;
		byte g;
		byte b;

		RGB() {
			clear();
		}

		public void clear() {
			r = g = b = 0;
		}
	}

	class IOIOThread extends BaseIOIOLooper {
		private SpiMaster spi_;

		@Override
		protected void setup() throws ConnectionLostException {
			spi_ = ioio_.openSpiMaster(5, 4, 3, 6, SpiMaster.Rate.RATE_50K);
		}

		@Override
		public void loop() throws ConnectionLostException {
			// We have 32 LEDs. Each one of them gets lit with probability
			// frequency_. If lit, we pick a random pixel from the current preview
			// frame and use its color. Otherwise, we set the LED to black and
			// setLed() will take care of gradual fading.
			Log.d(TAG, "testing");
			for (int i = 0; i < 32; i++) {
				RGB_.clear();
				getRandomColor(RGB_);
				setLed(i, RGB_);
			}
			// Since SPI messages are limited to 64 bytes, and we need to send
			// 96 bytes, we divide the message into two chunks of 48. We assume
			// that the SPI clock is slow enough (50K) so that the second half
			// will finish being sent to the IOIO before the first half
			// finished transmission.
			try {
				spi_.writeReadAsync(0, buffer1_, buffer1_.length, buffer1_.length, null, 0);
				spi_.writeRead(buffer2_, buffer2_.length, buffer2_.length, null, 0);
				Thread.sleep(50);
			} catch (InterruptedException e1) {
			}
		}

		/** Choose a random pixel from the current preview frame. */
		private void getRandomColor(RGB rgb) {
			rgb.r = 100;
			rgb.g = 100;
			rgb.b = 100;
		}

		/**
		 * Set an LED to a certain color.
		 * If black is applied, the LED will fade out.
		 */
		private void setLed(int num, RGB rgb) {
			// Find the right buffer to write to (first or second half).
			byte[] buffer;
			if (num >= 16) {
				buffer = buffer2_;
				num -= 16;
			} else {
				buffer = buffer1_;
			}
			num *= 3;
			buffer[num++] = fixColor(rgb.r, 0.9);
			buffer[num++] = rgb.g;
			buffer[num++] = fixColor(rgb.b, 0.5);
		}

		/** Attenuates a brightness level. */
		private byte fixColor(byte color, double attenuation) {
			double d = (double) ((int) color & 0xFF) / 256;
			d *= attenuation;
			return (byte) (d * 256);
		}
	}

	@Override
	protected IOIOLooper createIOIOLooper() {
		return new IOIOThread();
	}
}